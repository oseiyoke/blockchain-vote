"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _web = require("web3");

var _web2 = _interopRequireDefault(_web);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _this = undefined;

var web3 = void 0;

var enableMeta = function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.next = 2;
                        return window.ethereum.enable();

                    case 2:
                    case "end":
                        return _context.stop();
                }
            }
        }, _callee, _this);
    }));

    return function enableMeta() {
        return _ref.apply(this, arguments);
    };
}();

if (typeof window !== "undefined" && typeof window.web3 !== "undefined") {
    //We are in the browser and metamask is running
    web3 = new _web2.default(window.web3.currentProvider);
    enableMeta();
} else {
    // We are on the server *OR* the user is not running metamask
    var provider = new _web2.default.providers.HttpProvider("https://rinkeby.infura.io/v3/33f420fcb0d049feb46730b08931fcfc");
    web3 = new _web2.default(provider);
}

exports.default = web3;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX3RoaXMiLCJ3ZWIzIiwiZW5hYmxlTWV0YSIsIl9yZWYiLCJtYXJrIiwiX2NhbGxlZSIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJ3aW5kb3ciLCJldGhlcmV1bSIsImVuYWJsZSIsInN0b3AiLCJhcHBseSIsImFyZ3VtZW50cyIsImN1cnJlbnRQcm92aWRlciIsInByb3ZpZGVyIiwicHJvdmlkZXJzIiwiSHR0cFByb3ZpZGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBSUE7Ozs7OztBQUZBLElBQUlBLGlCQUFKOztBQUlBLElBQUlDLE9BQU8sS0FBSyxDQUFoQjs7QUFFQSxJQUFJQyxhQUFhLFlBQVk7QUFDekIsUUFBSUMsT0FBTyxpQ0FBbUIsYUFBYSxzQkFBb0JDLElBQXBCLENBQXlCLFNBQVNDLE9BQVQsR0FBbUI7QUFDbkYsZUFBTyxzQkFBb0JDLElBQXBCLENBQXlCLFNBQVNDLFFBQVQsQ0FBa0JDLFFBQWxCLEVBQTRCO0FBQ3hELG1CQUFPLENBQVAsRUFBVTtBQUNOLHdCQUFRQSxTQUFTQyxJQUFULEdBQWdCRCxTQUFTRSxJQUFqQztBQUNJLHlCQUFLLENBQUw7QUFDSUYsaUNBQVNFLElBQVQsR0FBZ0IsQ0FBaEI7QUFDQSwrQkFBT0MsT0FBT0MsUUFBUCxDQUFnQkMsTUFBaEIsRUFBUDs7QUFFSix5QkFBSyxDQUFMO0FBQ0EseUJBQUssS0FBTDtBQUNJLCtCQUFPTCxTQUFTTSxJQUFULEVBQVA7QUFQUjtBQVNIO0FBQ0osU0FaTSxFQVlKVCxPQVpJLEVBWUtMLEtBWkwsQ0FBUDtBQWFILEtBZDBDLENBQWhDLENBQVg7O0FBZ0JBLFdBQU8sU0FBU0UsVUFBVCxHQUFzQjtBQUN6QixlQUFPQyxLQUFLWSxLQUFMLENBQVcsSUFBWCxFQUFpQkMsU0FBakIsQ0FBUDtBQUNILEtBRkQ7QUFHSCxDQXBCZ0IsRUFBakI7O0FBc0JBLElBQUksT0FBT0wsTUFBUCxLQUFrQixXQUFsQixJQUFpQyxPQUFPQSxPQUFPVixJQUFkLEtBQXVCLFdBQTVELEVBQXlFO0FBQ3JFO0FBQ0FBLFdBQU8sa0JBQVNVLE9BQU9WLElBQVAsQ0FBWWdCLGVBQXJCLENBQVA7QUFDQWY7QUFDSCxDQUpELE1BSU87QUFDSDtBQUNBLFFBQUlnQixXQUFXLElBQUksY0FBS0MsU0FBTCxDQUFlQyxZQUFuQixDQUFnQywrREFBaEMsQ0FBZjtBQUNBbkIsV0FBTyxrQkFBU2lCLFFBQVQsQ0FBUDtBQUNIOztrQkFFY2pCLEkiLCJmaWxlIjoidW5rbm93biIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gXCJiYWJlbC1ydW50aW1lL3JlZ2VuZXJhdG9yXCI7XG5pbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSBcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yXCI7XG5cbnZhciBfdGhpcyA9IHRoaXM7XG5cbmltcG9ydCBXZWIzIGZyb20gXCJ3ZWIzXCI7XG5cbnZhciB3ZWIzID0gdm9pZCAwO1xuXG52YXIgZW5hYmxlTWV0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuZXRoZXJldW0uZW5hYmxlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgX2NhbGxlZSwgX3RoaXMpO1xuICAgIH0pKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiBlbmFibGVNZXRhKCkge1xuICAgICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG59KCk7XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cud2ViMyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIC8vV2UgYXJlIGluIHRoZSBicm93c2VyIGFuZCBtZXRhbWFzayBpcyBydW5uaW5nXG4gICAgd2ViMyA9IG5ldyBXZWIzKHdpbmRvdy53ZWIzLmN1cnJlbnRQcm92aWRlcik7XG4gICAgZW5hYmxlTWV0YSgpO1xufSBlbHNlIHtcbiAgICAvLyBXZSBhcmUgb24gdGhlIHNlcnZlciAqT1IqIHRoZSB1c2VyIGlzIG5vdCBydW5uaW5nIG1ldGFtYXNrXG4gICAgdmFyIHByb3ZpZGVyID0gbmV3IFdlYjMucHJvdmlkZXJzLkh0dHBQcm92aWRlcihcImh0dHBzOi8vcmlua2VieS5pbmZ1cmEuaW8vdjMvMzNmNDIwZmNiMGQwNDlmZWI0NjczMGIwODkzMWZjZmNcIik7XG4gICAgd2ViMyA9IG5ldyBXZWIzKHByb3ZpZGVyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2ViMzsiXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX3RoaXMiLCJ3ZWIzIiwiZW5hYmxlTWV0YSIsIl9yZWYiLCJtYXJrIiwiX2NhbGxlZSIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJ3aW5kb3ciLCJldGhlcmV1bSIsImVuYWJsZSIsInN0b3AiLCJhcHBseSIsImFyZ3VtZW50cyIsImN1cnJlbnRQcm92aWRlciIsInByb3ZpZGVyIiwicHJvdmlkZXJzIiwiSHR0cFByb3ZpZGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBSUE7Ozs7OztBQUZBLElBQUlBLGlCQUFKOztBQUlBLElBQUlDLE9BQU8sS0FBSyxDQUFoQjs7QUFFQSxJQUFJQyxhQUFhLFlBQVk7QUFDekIsUUFBSUMsT0FBTyxpQ0FBbUIsYUFBYSxzQkFBb0JDLElBQXBCLENBQXlCLFNBQVNDLE9BQVQsR0FBbUI7QUFDbkYsZUFBTyxzQkFBb0JDLElBQXBCLENBQXlCLFNBQVNDLFFBQVQsQ0FBa0JDLFFBQWxCLEVBQTRCO0FBQ3hELG1CQUFPLENBQVAsRUFBVTtBQUNOLHdCQUFRQSxTQUFTQyxJQUFULEdBQWdCRCxTQUFTRSxJQUFqQztBQUNJLHlCQUFLLENBQUw7QUFDSUYsaUNBQVNFLElBQVQsR0FBZ0IsQ0FBaEI7QUFDQSwrQkFBT0MsT0FBT0MsUUFBUCxDQUFnQkMsTUFBaEIsRUFBUDs7QUFFSix5QkFBSyxDQUFMO0FBQ0EseUJBQUssS0FBTDtBQUNJLCtCQUFPTCxTQUFTTSxJQUFULEVBQVA7QUFQUjtBQVNIO0FBQ0osU0FaTSxFQVlKVCxPQVpJLEVBWUtMLEtBWkwsQ0FBUDtBQWFILEtBZDBDLENBQWhDLENBQVg7O0FBZ0JBLFdBQU8sU0FBU0UsVUFBVCxHQUFzQjtBQUN6QixlQUFPQyxLQUFLWSxLQUFMLENBQVcsSUFBWCxFQUFpQkMsU0FBakIsQ0FBUDtBQUNILEtBRkQ7QUFHSCxDQXBCZ0IsRUFBakI7O0FBc0JBLElBQUksT0FBT0wsTUFBUCxLQUFrQixXQUFsQixJQUFpQyxPQUFPQSxPQUFPVixJQUFkLEtBQXVCLFdBQTVELEVBQXlFO0FBQ3JFO0FBQ0FBLFdBQU8sa0JBQVNVLE9BQU9WLElBQVAsQ0FBWWdCLGVBQXJCLENBQVA7QUFDQWY7QUFDSCxDQUpELE1BSU87QUFDSDtBQUNBLFFBQUlnQixXQUFXLElBQUksY0FBS0MsU0FBTCxDQUFlQyxZQUFuQixDQUFnQywrREFBaEMsQ0FBZjtBQUNBbkIsV0FBTyxrQkFBU2lCLFFBQVQsQ0FBUDtBQUNIOztrQkFFY2pCLEkiLCJmaWxlIjoidW5rbm93biJ9