"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _factory = require("../ethereum/factory");

var _factory2 = _interopRequireDefault(_factory);

var _Layout = require("../components/Layout");

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require("../routes");

var _semanticUiReact = require("semantic-ui-react");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = "/Users/mac/Documents/SchoolWork/project/semantic/pages/index.js?entry";


var PollIndex = function (_Component) {
  (0, _inherits3.default)(PollIndex, _Component);

  function PollIndex() {
    (0, _classCallCheck3.default)(this, PollIndex);

    return (0, _possibleConstructorReturn3.default)(this, (PollIndex.__proto__ || (0, _getPrototypeOf2.default)(PollIndex)).apply(this, arguments));
  }

  (0, _createClass3.default)(PollIndex, [{
    key: "renderPolls",
    value: function renderPolls() {
      var items = this.props.polls.map(function (address) {
        return {
          header: address,
          description: _react2.default.createElement("div", {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 26
            }
          }, _react2.default.createElement(_routes.Link, { route: "/polls/" + address, __source: {
              fileName: _jsxFileName,
              lineNumber: 27
            }
          }, _react2.default.createElement("a", {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 28
            }
          }, "View Poll"))),
          fluid: true,
          style: {
            overflowWrap: "break-word"
          }
        };
      });

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 39
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 44
        }
      }, _react2.default.createElement("div", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 45
        }
      }, _react2.default.createElement("h3", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 46
        }
      }, "Open Polls"), _react2.default.createElement(_routes.Link, { route: "/polls/new", __source: {
          fileName: _jsxFileName,
          lineNumber: 48
        }
      }, _react2.default.createElement("a", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 49
        }
      }, _react2.default.createElement(_semanticUiReact.Button, {
        floated: "right",
        content: "Create Poll",
        icon: "add circle",
        primary: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 50
        }
      }))), this.renderPolls()));
    }
  }], [{
    key: "getInitialProps",
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var polls, _polls;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return _factory2.default.methods.getDeployedPolls().call();

              case 3:
                polls = _context.sent;
                return _context.abrupt("return", { polls: polls });

              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](0);
                _polls = ["No Polls Fetched"];

                console.log(_context.t0);

                return _context.abrupt("return", { polls: _polls });

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 7]]);
      }));

      function getInitialProps() {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return PollIndex;
}(_react.Component);

exports.default = PollIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiUG9sbEluZGV4IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJQb2xscyIsIml0ZW1zIiwicHJvcHMiLCJwb2xscyIsIm1hcCIsImFkZHJlc3MiLCJoZWFkZXIiLCJkZXNjcmlwdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJvdXRlIiwiZmx1aWQiLCJzdHlsZSIsIm92ZXJmbG93V3JhcCIsIkdyb3VwIiwicmVuZGVyIiwiZmxvYXRlZCIsImNvbnRlbnQiLCJpY29uIiwicHJpbWFyeSIsIl9yZWYiLCJtYXJrIiwiX2NhbGxlZSIsIl9wb2xscyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJtZXRob2RzIiwiZ2V0RGVwbG95ZWRQb2xscyIsImNhbGwiLCJzZW50IiwiYWJydXB0IiwidDAiLCJjb25zb2xlIiwibG9nIiwic3RvcCIsImdldEluaXRpYWxQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUxBLElBQUlBLGVBQWUsdUVBQW5COzs7QUFPQSxJQUFJQyxZQUFZLFVBQVVDLFVBQVYsRUFBc0I7QUFDcEMsMEJBQVVELFNBQVYsRUFBcUJDLFVBQXJCOztBQUVBLFdBQVNELFNBQVQsR0FBcUI7QUFDbkIsa0NBQWdCLElBQWhCLEVBQXNCQSxTQUF0Qjs7QUFFQSxXQUFPLHlDQUEyQixJQUEzQixFQUFpQyxDQUFDQSxVQUFVRSxTQUFWLElBQXVCLDhCQUF1QkYsU0FBdkIsQ0FBeEIsRUFBMkRHLEtBQTNELENBQWlFLElBQWpFLEVBQXVFQyxTQUF2RSxDQUFqQyxD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