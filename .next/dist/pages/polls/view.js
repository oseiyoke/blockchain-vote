"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _poll = require("../../ethereum/poll");

var _poll2 = _interopRequireDefault(_poll);

var _web = require("../../ethereum/web3");

var _web2 = _interopRequireDefault(_web);

var _routes = require("../../routes");

var _Layout = require("../../components/Layout");

var _Layout2 = _interopRequireDefault(_Layout);

var _semanticUiReact = require("semantic-ui-react");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = "/Users/mac/Documents/SchoolWork/project/semantic/pages/polls/view.js?entry";


var PollShow = function (_Component) {
  (0, _inherits3.default)(PollShow, _Component);

  (0, _createClass3.default)(PollShow, null, [{
    key: "getInitialProps",
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
        var candidates, numCandidates, title, poll, accounts;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                candidates = [];
                numCandidates = 0;
                title = "";
                _context.prev = 3;
                poll = (0, _poll2.default)(props.query.address);
                _context.next = 7;
                return _web2.default.eth.getAccounts();

              case 7:
                accounts = _context.sent;

                // const [account] = await web3.eth.getAccount();
                console.log("account ", accounts[0]);

                _context.next = 11;
                return poll.methods.getNumOfCandidates().call({
                  from: accounts[0]
                });

              case 11:
                numCandidates = _context.sent;
                _context.next = 14;
                return _promise2.default.all(Array(parseInt(numCandidates)).fill().map(function (element, index) {
                  return poll.methods.getCandidate(index).call({
                    from: accounts[0]
                  });
                }));

              case 14:
                candidates = _context.sent;
                _context.next = 17;
                return poll.methods.title().call();

              case 17:
                title = _context.sent;

                title = _web2.default.utils.toAscii(title);

                console.log(candidates);
                _context.next = 25;
                break;

              case 22:
                _context.prev = 22;
                _context.t0 = _context["catch"](3);

                console.log(_context.t0.message);

              case 25:
                return _context.abrupt("return", {
                  address: props.query.address,
                  candidates: candidates,
                  numCandidates: numCandidates,
                  title: title
                });

              case 26:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[3, 22]]);
      }));

      function getInitialProps(_x) {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  function PollShow(props) {
    (0, _classCallCheck3.default)(this, PollShow);

    var _this = (0, _possibleConstructorReturn3.default)(this, (PollShow.__proto__ || (0, _getPrototypeOf2.default)(PollShow)).call(this, props));

    _this.state = {
      candidates: [],
      errorMessage: "",
      isHidden: true
    };
    return _this;
  }

  (0, _createClass3.default)(PollShow, [{
    key: "renderCards",
    value: function renderCards() {
      var _this2 = this;

      var candidates = this.props.candidates;

      console.log(candidates);

      var item = [];
      candidates.forEach(function (element) {
        item.push({
          header: _web2.default.utils.toAscii(element[1]),
          meta: _web2.default.utils.toAscii(element[2]),
          description: _react2.default.createElement("a", { href: "/polls/" + _this2.props.address + "/candidates/" + element[0], __source: {
              fileName: _jsxFileName,
              lineNumber: 70
            }
          }, "View"),
          style: {
            overflowWrap: "break-word"
          }
        });
      });

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: item, __source: {
          fileName: _jsxFileName,
          lineNumber: 80
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 85
        }
      }, _react2.default.createElement(_semanticUiReact.Grid, { style: { marginTop: "10px" }, __source: {
          fileName: _jsxFileName,
          lineNumber: 86
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 87
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, { textAlign: "center", __source: {
          fileName: _jsxFileName,
          lineNumber: 88
        }
      }, _react2.default.createElement("h3", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 89
        }
      }, this.props.title), _react2.default.createElement("h6", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 90
        }
      }, this.props.address), _react2.default.createElement("br", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 91
        }
      }), _react2.default.createElement(_routes.Link, { route: "/polls/" + this.props.address + "/candidates/new", __source: {
          fileName: _jsxFileName,
          lineNumber: 92
        }
      }, _react2.default.createElement("a", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 93
        }
      }, _react2.default.createElement(_semanticUiReact.Button, {
        floated: "right",
        content: "Add Candidate",
        icon: "add circle",
        primary: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 94
        }
      }))))), _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 105
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 106
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 107
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 108
        }
      }, _react2.default.createElement("div", { style: { marginBottom: "10px" }, __source: {
          fileName: _jsxFileName,
          lineNumber: 109
        }
      }, _react2.default.createElement(_semanticUiReact.Message, {
        error: !!this.state.errorMessage,
        hidden: this.state.isHidden,
        header: "Oops!",
        content: this.state.errorMessage,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 110
        }
      })))), _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 120
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 121
        }
      }, this.renderCards()))))));
    }
  }]);

  return PollShow;
}(_react.Component);

exports.default = PollShow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,